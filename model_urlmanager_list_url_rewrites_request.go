/*
Url Manager Service

The URL Manager service provides a set of APIs for managing URL rewrites within your application. URL rewriting is a technique used to modify the appearance or structure of URLs while maintaining the functionality and accessibility of the underlying resources.  The URL Manager service offers various operations to create, retrieve, update, and delete URL rewrite configurations. These configurations allow you to define rules that map incoming URLs to different paths or destinations based on specific criteria. By using URL rewriting, you can enhance the user experience, improve SEO (Search Engine Optimization), and manage complex URL structures effectively.  To get started with the URL Manager service, you need to integrate the provided Proto API into your application. The API supports various programming languages and frameworks, making it easy to incorporate URL rewriting functionality into your existing codebase.  Once integrated, you can utilize the different API methods to create, manage, and query URL rewrite configurations based on your application's requirements.  Refer to the API documentation for detailed information on the request and response formats, authentication requirements, and example usage of each API method.

API version: 1.0.0
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package urlmanager

import (
	"encoding/json"
)

// checks if the UrlmanagerListUrlRewritesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UrlmanagerListUrlRewritesRequest{}

// UrlmanagerListUrlRewritesRequest struct for UrlmanagerListUrlRewritesRequest
type UrlmanagerListUrlRewritesRequest struct {
	// Required.
	TenantId *string                       `json:"tenantId,omitempty"`
	Filter   *ListUrlRewritesRequestFilter `json:"filter,omitempty"`
	// The maximum number of url rewrites to return. The service may return fewer than this value. If unspecified, at most 10 url rewrites will be returned. The maximum value is 200; values above 200 will be coerced to 200.
	PageSize *int64 `json:"pageSize,omitempty"`
	// A page token, received from a previous `ListUrlRewrites` call. Provide this to retrieve the subsequent page.   When paginating, all other parameters provided to `ListUrlRewrites` must match the call that provided the page token.
	PageToken            *string `json:"pageToken,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UrlmanagerListUrlRewritesRequest UrlmanagerListUrlRewritesRequest

// NewUrlmanagerListUrlRewritesRequest instantiates a new UrlmanagerListUrlRewritesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUrlmanagerListUrlRewritesRequest() *UrlmanagerListUrlRewritesRequest {
	this := UrlmanagerListUrlRewritesRequest{}
	return &this
}

// NewUrlmanagerListUrlRewritesRequestWithDefaults instantiates a new UrlmanagerListUrlRewritesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUrlmanagerListUrlRewritesRequestWithDefaults() *UrlmanagerListUrlRewritesRequest {
	this := UrlmanagerListUrlRewritesRequest{}
	return &this
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *UrlmanagerListUrlRewritesRequest) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlmanagerListUrlRewritesRequest) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *UrlmanagerListUrlRewritesRequest) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *UrlmanagerListUrlRewritesRequest) SetTenantId(v string) {
	o.TenantId = &v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *UrlmanagerListUrlRewritesRequest) GetFilter() ListUrlRewritesRequestFilter {
	if o == nil || IsNil(o.Filter) {
		var ret ListUrlRewritesRequestFilter
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlmanagerListUrlRewritesRequest) GetFilterOk() (*ListUrlRewritesRequestFilter, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *UrlmanagerListUrlRewritesRequest) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given ListUrlRewritesRequestFilter and assigns it to the Filter field.
func (o *UrlmanagerListUrlRewritesRequest) SetFilter(v ListUrlRewritesRequestFilter) {
	o.Filter = &v
}

// GetPageSize returns the PageSize field value if set, zero value otherwise.
func (o *UrlmanagerListUrlRewritesRequest) GetPageSize() int64 {
	if o == nil || IsNil(o.PageSize) {
		var ret int64
		return ret
	}
	return *o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlmanagerListUrlRewritesRequest) GetPageSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.PageSize) {
		return nil, false
	}
	return o.PageSize, true
}

// HasPageSize returns a boolean if a field has been set.
func (o *UrlmanagerListUrlRewritesRequest) HasPageSize() bool {
	if o != nil && !IsNil(o.PageSize) {
		return true
	}

	return false
}

// SetPageSize gets a reference to the given int64 and assigns it to the PageSize field.
func (o *UrlmanagerListUrlRewritesRequest) SetPageSize(v int64) {
	o.PageSize = &v
}

// GetPageToken returns the PageToken field value if set, zero value otherwise.
func (o *UrlmanagerListUrlRewritesRequest) GetPageToken() string {
	if o == nil || IsNil(o.PageToken) {
		var ret string
		return ret
	}
	return *o.PageToken
}

// GetPageTokenOk returns a tuple with the PageToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlmanagerListUrlRewritesRequest) GetPageTokenOk() (*string, bool) {
	if o == nil || IsNil(o.PageToken) {
		return nil, false
	}
	return o.PageToken, true
}

// HasPageToken returns a boolean if a field has been set.
func (o *UrlmanagerListUrlRewritesRequest) HasPageToken() bool {
	if o != nil && !IsNil(o.PageToken) {
		return true
	}

	return false
}

// SetPageToken gets a reference to the given string and assigns it to the PageToken field.
func (o *UrlmanagerListUrlRewritesRequest) SetPageToken(v string) {
	o.PageToken = &v
}

func (o UrlmanagerListUrlRewritesRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UrlmanagerListUrlRewritesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TenantId) {
		toSerialize["tenantId"] = o.TenantId
	}
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	if !IsNil(o.PageSize) {
		toSerialize["pageSize"] = o.PageSize
	}
	if !IsNil(o.PageToken) {
		toSerialize["pageToken"] = o.PageToken
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UrlmanagerListUrlRewritesRequest) UnmarshalJSON(data []byte) (err error) {
	varUrlmanagerListUrlRewritesRequest := _UrlmanagerListUrlRewritesRequest{}

	err = json.Unmarshal(data, &varUrlmanagerListUrlRewritesRequest)

	if err != nil {
		return err
	}

	*o = UrlmanagerListUrlRewritesRequest(varUrlmanagerListUrlRewritesRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tenantId")
		delete(additionalProperties, "filter")
		delete(additionalProperties, "pageSize")
		delete(additionalProperties, "pageToken")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *UrlmanagerListUrlRewritesRequest) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *UrlmanagerListUrlRewritesRequest) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableUrlmanagerListUrlRewritesRequest struct {
	value *UrlmanagerListUrlRewritesRequest
	isSet bool
}

func (v NullableUrlmanagerListUrlRewritesRequest) Get() *UrlmanagerListUrlRewritesRequest {
	return v.value
}

func (v *NullableUrlmanagerListUrlRewritesRequest) Set(val *UrlmanagerListUrlRewritesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUrlmanagerListUrlRewritesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUrlmanagerListUrlRewritesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUrlmanagerListUrlRewritesRequest(val *UrlmanagerListUrlRewritesRequest) *NullableUrlmanagerListUrlRewritesRequest {
	return &NullableUrlmanagerListUrlRewritesRequest{value: val, isSet: true}
}

func (v NullableUrlmanagerListUrlRewritesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUrlmanagerListUrlRewritesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
