/*
Url Manager Service

Testing BasicOperationsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package urlmanager

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/gemini-commerce/go-client-urlmanager"
)

func Test_urlmanager_BasicOperationsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BasicOperationsAPIService UrlManagerChangeUrlRewriteRequestPath", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BasicOperationsAPI.UrlManagerChangeUrlRewriteRequestPath(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicOperationsAPIService UrlManagerChangeUrlRewriteRequestPath2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BasicOperationsAPI.UrlManagerChangeUrlRewriteRequestPath2(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicOperationsAPIService UrlManagerCreateUrlRewrite", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BasicOperationsAPI.UrlManagerCreateUrlRewrite(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicOperationsAPIService UrlManagerCreateUrlRewrite2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BasicOperationsAPI.UrlManagerCreateUrlRewrite2(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicOperationsAPIService UrlManagerDeleteUrlRewrite", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BasicOperationsAPI.UrlManagerDeleteUrlRewrite(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicOperationsAPIService UrlManagerDeleteUrlRewrite2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BasicOperationsAPI.UrlManagerDeleteUrlRewrite2(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicOperationsAPIService UrlManagerGetUrlRewrite", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BasicOperationsAPI.UrlManagerGetUrlRewrite(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicOperationsAPIService UrlManagerGetUrlRewrite2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BasicOperationsAPI.UrlManagerGetUrlRewrite2(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicOperationsAPIService UrlManagerListUrlRewrites", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BasicOperationsAPI.UrlManagerListUrlRewrites(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicOperationsAPIService UrlManagerListUrlRewrites2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BasicOperationsAPI.UrlManagerListUrlRewrites2(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicOperationsAPIService UrlManagerListUrlRewritesByTargetPaths", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BasicOperationsAPI.UrlManagerListUrlRewritesByTargetPaths(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicOperationsAPIService UrlManagerListUrlRewritesByTargetPaths2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BasicOperationsAPI.UrlManagerListUrlRewritesByTargetPaths2(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicOperationsAPIService UrlManagerResolveUrlRewrite", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BasicOperationsAPI.UrlManagerResolveUrlRewrite(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BasicOperationsAPIService UrlManagerResolveUrlRewrite2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BasicOperationsAPI.UrlManagerResolveUrlRewrite2(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
