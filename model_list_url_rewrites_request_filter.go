/*
Url Manager Service

The URL Manager service provides a set of APIs for managing URL rewrites within your application. URL rewriting is a technique used to modify the appearance or structure of URLs while maintaining the functionality and accessibility of the underlying resources.  The URL Manager service offers various operations to create, retrieve, update, and delete URL rewrite configurations. These configurations allow you to define rules that map incoming URLs to different paths or destinations based on specific criteria. By using URL rewriting, you can enhance the user experience, improve SEO (Search Engine Optimization), and manage complex URL structures effectively.  To get started with the URL Manager service, you need to integrate the provided Proto API into your application. The API supports various programming languages and frameworks, making it easy to incorporate URL rewriting functionality into your existing codebase.  Once integrated, you can utilize the different API methods to create, manage, and query URL rewrite configurations based on your application's requirements.  Refer to the API documentation for detailed information on the request and response formats, authentication requirements, and example usage of each API method.

API version: 1.0.0
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package urlmanager

import (
	"encoding/json"
)

// checks if the ListUrlRewritesRequestFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListUrlRewritesRequestFilter{}

// ListUrlRewritesRequestFilter struct for ListUrlRewritesRequestFilter
type ListUrlRewritesRequestFilter struct {
	Context *string `json:"context,omitempty"`
	RequestPath *string `json:"requestPath,omitempty"`
	TargetPath *string `json:"targetPath,omitempty"`
	RedirectType *UrlRewriteRedirectType `json:"redirectType,omitempty"`
}

// NewListUrlRewritesRequestFilter instantiates a new ListUrlRewritesRequestFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListUrlRewritesRequestFilter() *ListUrlRewritesRequestFilter {
	this := ListUrlRewritesRequestFilter{}
	var redirectType UrlRewriteRedirectType = URLREWRITEREDIRECTTYPE_UNKNOWN
	this.RedirectType = &redirectType
	return &this
}

// NewListUrlRewritesRequestFilterWithDefaults instantiates a new ListUrlRewritesRequestFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListUrlRewritesRequestFilterWithDefaults() *ListUrlRewritesRequestFilter {
	this := ListUrlRewritesRequestFilter{}
	var redirectType UrlRewriteRedirectType = URLREWRITEREDIRECTTYPE_UNKNOWN
	this.RedirectType = &redirectType
	return &this
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *ListUrlRewritesRequestFilter) GetContext() string {
	if o == nil || IsNil(o.Context) {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListUrlRewritesRequestFilter) GetContextOk() (*string, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *ListUrlRewritesRequestFilter) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *ListUrlRewritesRequestFilter) SetContext(v string) {
	o.Context = &v
}

// GetRequestPath returns the RequestPath field value if set, zero value otherwise.
func (o *ListUrlRewritesRequestFilter) GetRequestPath() string {
	if o == nil || IsNil(o.RequestPath) {
		var ret string
		return ret
	}
	return *o.RequestPath
}

// GetRequestPathOk returns a tuple with the RequestPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListUrlRewritesRequestFilter) GetRequestPathOk() (*string, bool) {
	if o == nil || IsNil(o.RequestPath) {
		return nil, false
	}
	return o.RequestPath, true
}

// HasRequestPath returns a boolean if a field has been set.
func (o *ListUrlRewritesRequestFilter) HasRequestPath() bool {
	if o != nil && !IsNil(o.RequestPath) {
		return true
	}

	return false
}

// SetRequestPath gets a reference to the given string and assigns it to the RequestPath field.
func (o *ListUrlRewritesRequestFilter) SetRequestPath(v string) {
	o.RequestPath = &v
}

// GetTargetPath returns the TargetPath field value if set, zero value otherwise.
func (o *ListUrlRewritesRequestFilter) GetTargetPath() string {
	if o == nil || IsNil(o.TargetPath) {
		var ret string
		return ret
	}
	return *o.TargetPath
}

// GetTargetPathOk returns a tuple with the TargetPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListUrlRewritesRequestFilter) GetTargetPathOk() (*string, bool) {
	if o == nil || IsNil(o.TargetPath) {
		return nil, false
	}
	return o.TargetPath, true
}

// HasTargetPath returns a boolean if a field has been set.
func (o *ListUrlRewritesRequestFilter) HasTargetPath() bool {
	if o != nil && !IsNil(o.TargetPath) {
		return true
	}

	return false
}

// SetTargetPath gets a reference to the given string and assigns it to the TargetPath field.
func (o *ListUrlRewritesRequestFilter) SetTargetPath(v string) {
	o.TargetPath = &v
}

// GetRedirectType returns the RedirectType field value if set, zero value otherwise.
func (o *ListUrlRewritesRequestFilter) GetRedirectType() UrlRewriteRedirectType {
	if o == nil || IsNil(o.RedirectType) {
		var ret UrlRewriteRedirectType
		return ret
	}
	return *o.RedirectType
}

// GetRedirectTypeOk returns a tuple with the RedirectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListUrlRewritesRequestFilter) GetRedirectTypeOk() (*UrlRewriteRedirectType, bool) {
	if o == nil || IsNil(o.RedirectType) {
		return nil, false
	}
	return o.RedirectType, true
}

// HasRedirectType returns a boolean if a field has been set.
func (o *ListUrlRewritesRequestFilter) HasRedirectType() bool {
	if o != nil && !IsNil(o.RedirectType) {
		return true
	}

	return false
}

// SetRedirectType gets a reference to the given UrlRewriteRedirectType and assigns it to the RedirectType field.
func (o *ListUrlRewritesRequestFilter) SetRedirectType(v UrlRewriteRedirectType) {
	o.RedirectType = &v
}

func (o ListUrlRewritesRequestFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListUrlRewritesRequestFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.RequestPath) {
		toSerialize["requestPath"] = o.RequestPath
	}
	if !IsNil(o.TargetPath) {
		toSerialize["targetPath"] = o.TargetPath
	}
	if !IsNil(o.RedirectType) {
		toSerialize["redirectType"] = o.RedirectType
	}
	return toSerialize, nil
}

type NullableListUrlRewritesRequestFilter struct {
	value *ListUrlRewritesRequestFilter
	isSet bool
}

func (v NullableListUrlRewritesRequestFilter) Get() *ListUrlRewritesRequestFilter {
	return v.value
}

func (v *NullableListUrlRewritesRequestFilter) Set(val *ListUrlRewritesRequestFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableListUrlRewritesRequestFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableListUrlRewritesRequestFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListUrlRewritesRequestFilter(val *ListUrlRewritesRequestFilter) *NullableListUrlRewritesRequestFilter {
	return &NullableListUrlRewritesRequestFilter{value: val, isSet: true}
}

func (v NullableListUrlRewritesRequestFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListUrlRewritesRequestFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


