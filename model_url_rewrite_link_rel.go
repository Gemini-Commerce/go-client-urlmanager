/*
Url Manager Service

The URL Manager service provides a set of APIs for managing URL rewrites within your application. URL rewriting is a technique used to modify the appearance or structure of URLs while maintaining the functionality and accessibility of the underlying resources.  The URL Manager service offers various operations to create, retrieve, update, and delete URL rewrite configurations. These configurations allow you to define rules that map incoming URLs to different paths or destinations based on specific criteria. By using URL rewriting, you can enhance the user experience, improve SEO (Search Engine Optimization), and manage complex URL structures effectively.  To get started with the URL Manager service, you need to integrate the provided Proto API into your application. The API supports various programming languages and frameworks, making it easy to incorporate URL rewriting functionality into your existing codebase.  Once integrated, you can utilize the different API methods to create, manage, and query URL rewrite configurations based on your application's requirements.  Refer to the API documentation for detailed information on the request and response formats, authentication requirements, and example usage of each API method.

API version: 1.0.0
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package urlmanager

import (
	"encoding/json"
	"fmt"
)

// UrlRewriteLinkRel the model 'UrlRewriteLinkRel'
type UrlRewriteLinkRel string

// List of UrlRewriteLinkRel
const (
	URLREWRITELINKREL_UNKNOWN UrlRewriteLinkRel = "LinkRel_UNKNOWN"
	URLREWRITELINKREL_NONE UrlRewriteLinkRel = "LinkRel_NONE"
	URLREWRITELINKREL_CANONICAL UrlRewriteLinkRel = "LinkRel_CANONICAL"
	URLREWRITELINKREL_ALTERNATE UrlRewriteLinkRel = "LinkRel_ALTERNATE"
)

// All allowed values of UrlRewriteLinkRel enum
var AllowedUrlRewriteLinkRelEnumValues = []UrlRewriteLinkRel{
	"LinkRel_UNKNOWN",
	"LinkRel_NONE",
	"LinkRel_CANONICAL",
	"LinkRel_ALTERNATE",
}

func (v *UrlRewriteLinkRel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UrlRewriteLinkRel(value)
	for _, existing := range AllowedUrlRewriteLinkRelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UrlRewriteLinkRel", value)
}

// NewUrlRewriteLinkRelFromValue returns a pointer to a valid UrlRewriteLinkRel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUrlRewriteLinkRelFromValue(v string) (*UrlRewriteLinkRel, error) {
	ev := UrlRewriteLinkRel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UrlRewriteLinkRel: valid values are %v", v, AllowedUrlRewriteLinkRelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UrlRewriteLinkRel) IsValid() bool {
	for _, existing := range AllowedUrlRewriteLinkRelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UrlRewriteLinkRel value
func (v UrlRewriteLinkRel) Ptr() *UrlRewriteLinkRel {
	return &v
}

type NullableUrlRewriteLinkRel struct {
	value *UrlRewriteLinkRel
	isSet bool
}

func (v NullableUrlRewriteLinkRel) Get() *UrlRewriteLinkRel {
	return v.value
}

func (v *NullableUrlRewriteLinkRel) Set(val *UrlRewriteLinkRel) {
	v.value = val
	v.isSet = true
}

func (v NullableUrlRewriteLinkRel) IsSet() bool {
	return v.isSet
}

func (v *NullableUrlRewriteLinkRel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUrlRewriteLinkRel(val *UrlRewriteLinkRel) *NullableUrlRewriteLinkRel {
	return &NullableUrlRewriteLinkRel{value: val, isSet: true}
}

func (v NullableUrlRewriteLinkRel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUrlRewriteLinkRel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

