/*
Url Manager Service

The URL Manager service provides a set of APIs for managing URL rewrites within your application. URL rewriting is a technique used to modify the appearance or structure of URLs while maintaining the functionality and accessibility of the underlying resources.  The URL Manager service offers various operations to create, retrieve, update, and delete URL rewrite configurations. These configurations allow you to define rules that map incoming URLs to different paths or destinations based on specific criteria. By using URL rewriting, you can enhance the user experience, improve SEO (Search Engine Optimization), and manage complex URL structures effectively.  To get started with the URL Manager service, you need to integrate the provided Proto API into your application. The API supports various programming languages and frameworks, making it easy to incorporate URL rewriting functionality into your existing codebase.  Once integrated, you can utilize the different API methods to create, manage, and query URL rewrite configurations based on your application's requirements.  Refer to the API documentation for detailed information on the request and response formats, authentication requirements, and example usage of each API method.

API version: 1.0.0
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package urlmanager

import (
	"encoding/json"
	"fmt"
)

// UrlRewriteRedirectType the model 'UrlRewriteRedirectType'
type UrlRewriteRedirectType string

// List of UrlRewriteRedirectType
const (
	UNKNOWN UrlRewriteRedirectType = "RedirectType_UNKNOWN"
	OK UrlRewriteRedirectType = "RedirectType_OK"
	PERMANENT UrlRewriteRedirectType = "RedirectType_PERMANENT"
	TEMPORARY UrlRewriteRedirectType = "RedirectType_TEMPORARY"
)

// All allowed values of UrlRewriteRedirectType enum
var AllowedUrlRewriteRedirectTypeEnumValues = []UrlRewriteRedirectType{
	"RedirectType_UNKNOWN",
	"RedirectType_OK",
	"RedirectType_PERMANENT",
	"RedirectType_TEMPORARY",
}

func (v *UrlRewriteRedirectType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UrlRewriteRedirectType(value)
	for _, existing := range AllowedUrlRewriteRedirectTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UrlRewriteRedirectType", value)
}

// NewUrlRewriteRedirectTypeFromValue returns a pointer to a valid UrlRewriteRedirectType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUrlRewriteRedirectTypeFromValue(v string) (*UrlRewriteRedirectType, error) {
	ev := UrlRewriteRedirectType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UrlRewriteRedirectType: valid values are %v", v, AllowedUrlRewriteRedirectTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UrlRewriteRedirectType) IsValid() bool {
	for _, existing := range AllowedUrlRewriteRedirectTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UrlRewriteRedirectType value
func (v UrlRewriteRedirectType) Ptr() *UrlRewriteRedirectType {
	return &v
}

type NullableUrlRewriteRedirectType struct {
	value *UrlRewriteRedirectType
	isSet bool
}

func (v NullableUrlRewriteRedirectType) Get() *UrlRewriteRedirectType {
	return v.value
}

func (v *NullableUrlRewriteRedirectType) Set(val *UrlRewriteRedirectType) {
	v.value = val
	v.isSet = true
}

func (v NullableUrlRewriteRedirectType) IsSet() bool {
	return v.isSet
}

func (v *NullableUrlRewriteRedirectType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUrlRewriteRedirectType(val *UrlRewriteRedirectType) *NullableUrlRewriteRedirectType {
	return &NullableUrlRewriteRedirectType{value: val, isSet: true}
}

func (v NullableUrlRewriteRedirectType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUrlRewriteRedirectType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

